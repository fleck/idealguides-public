// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file will be automatically regenerated when your Next.js server is running.
/* eslint-disable */

// prettier-ignore
declare module "nextjs-routes" {
  export type Route =
    | { pathname: "/404"; query?: Query | undefined }
    | { pathname: "/[itemUrl]"; query: Query<{ "itemUrl": string }> }
    | { pathname: "/api/clearAllCache"; query?: Query | undefined }
    | { pathname: "/api/client/v4/zones/[zone]/[endpoint]"; query: Query<{ "zone": string; "endpoint": string }> }
    | { pathname: "/api/coverage"; query?: Query | undefined }
    | { pathname: "/api/embeds/[url]"; query: Query<{ "url": string }> }
    | { pathname: "/api/files/[key]/[filename]"; query: Query<{ "key": string; "filename": string }> }
    | { pathname: "/api/files/[key]/variant/[variation]/[filename]"; query: Query<{ "key": string; "variation": string; "filename": string }> }
    | { pathname: "/api/files/create"; query?: Query | undefined }
    | { pathname: "/api/indexers/[token]/[clientId]"; query: Query<{ "token": string; "clientId": string }> }
    | { pathname: "/api/indexers/connected"; query?: Query | undefined }
    | { pathname: "/api/indexers/ensureWsModuleGetsTraced"; query?: Query | undefined }
    | { pathname: "/api/istanbulCoverage"; query?: Query | undefined }
    | { pathname: "/api/rpc/[[...blitz]]"; query?: Query | undefined }
    | { pathname: "/api/trpc/[trpc]"; query: Query<{ "trpc": string }> }
    | { pathname: "/api/users/dataUpdates/[userId]"; query: Query<{ "userId": string }> }
    | { pathname: "/embed/[page]"; query: Query<{ "page": string }> }
    | { pathname: "/embed/edit/[id]"; query: Query<{ "id": string }> }
    | { pathname: "/embed"; query?: Query | undefined }
    | { pathname: "/"; query?: Query | undefined }
    | { pathname: "/indexers/[id]/edit"; query: Query<{ "id": string }> }
    | { pathname: "/indexers"; query?: Query | undefined }
    | { pathname: "/indexers/new"; query?: Query | undefined }
    | { pathname: "/items/new"; query?: Query | undefined }
    | { pathname: "/mission"; query?: Query | undefined }
    | { pathname: "/privacy-policy"; query?: Query | undefined }
    | { pathname: "/property_templates/[page]"; query: Query<{ "page": string }> }
    | { pathname: "/property_templates/edit/[id]"; query: Query<{ "id": string }> }
    | { pathname: "/property_templates/new"; query?: Query | undefined }
    | { pathname: "/search"; query?: Query | undefined }
    | { pathname: "/terms-of-use"; query?: Query | undefined }
    | { pathname: "/up"; query?: Query | undefined }
    | { pathname: "/user/forgot-password"; query?: Query | undefined }
    | { pathname: "/user"; query?: Query | undefined }
    | { pathname: "/user/login"; query?: Query | undefined }
    | { pathname: "/user/signup"; query?: Query | undefined };

  type Query<Params = {}> = Params & {
    [key: string]: string | string[] | undefined;
  };

  type QueryForPathname = {
    [K in Route as K["pathname"]]: Exclude<K["query"], undefined>;
  };

  export type RoutedQuery<P extends Route["pathname"]> = QueryForPathname[P];

  export type Locale = undefined;

  /**
   * A typesafe utility function for generating paths in your application.
   *
   * route({ pathname: "/foos/[foo]", query: { foo: "bar" }}) will produce "/foos/bar".
   */
  export declare function route(r: Route): string;
}

// prettier-ignore
declare module "next/link" {
  import type { Route } from "nextjs-routes";
  import type { LinkProps as NextLinkProps } from "next/dist/client/link";
  import type { PropsWithChildren, MouseEventHandler } from "react";
  export * from "next/dist/client/link";

  type Query = { query?: { [key: string]: string | string[] | undefined } };
  type StaticRoute = Exclude<Route, { query: any }>["pathname"];

  export interface LinkProps<Href extends Route | Query = Route | Query>
    extends Omit<NextLinkProps, "href" | "locale"> {
    href: Href;
    locale?: false;
  }

  type LinkReactElement = DetailedReactHTMLElement<
    {
      onMouseEnter?: MouseEventHandler<Element> | undefined;
      onClick: MouseEventHandler;
      href?: string | undefined;
      ref?: any;
    },
    HTMLElement
  >;

  declare function Link(
    props: PropsWithChildren<LinkProps<Route>>
  ): LinkReactElement;
  declare function Link(
    props: PropsWithChildren<LinkProps<StaticRoute>>
  ): LinkReactElement;
  declare function Link(
    props: PropsWithChildren<LinkProps<Query>>
  ): LinkReactElement;

  export default Link;
}

// prettier-ignore
declare module "next/router" {
  import type { Locale, Route, RoutedQuery } from "nextjs-routes";
  import type { NextRouter as Router } from "next/dist/client/router";
  export * from "next/dist/client/router";
  export { default } from "next/dist/client/router";

  type NextTransitionOptions = NonNullable<Parameters<Router["push"]>[2]>;
  type StaticRoute = Exclude<Route, { query: any }>["pathname"];

  interface TransitionOptions extends Omit<NextTransitionOptions, "locale"> {
    locale?: false;
  };

  export interface NextRouter<P extends Route["pathname"] = Route["pathname"]>
    extends Omit<
      Router,
      | "push"
      | "replace"
      | "locale"
      | "locales"
      | "defaultLocale"
      | "domainLocales"
    > {
    defaultLocale?: undefined;
    domainLocales?: undefined;
    locale?: Locale;
    locales?: undefined;
    pathname: P;
    push(
      url: Route,
      as?: string,
      options?: TransitionOptions
    ): Promise<boolean>;
    push(
      url: StaticRoute,
      as?: string,
      options?: TransitionOptions
    ): Promise<boolean>;
    push(
      url: { query: { [key: string]: string | string[] | undefined } },
      as?: string,
      options?: TransitionOptions
    ): Promise<boolean>;
    query: RoutedQuery<P>;
    replace(
      url: Route,
      as?: string,
      options?: TransitionOptions
    ): Promise<boolean>;
    replace(
      url: StaticRoute,
      as?: string,
      options?: TransitionOptions
    ): Promise<boolean>;
    replace(
      url: { query: { [key: string]: string | string[] | undefined } },
      as?: string,
      options?: TransitionOptions
    ): Promise<boolean>;
    route: P;
  }

  export function useRouter<P extends Route["pathname"]>(): NextRouter<P>;
}
